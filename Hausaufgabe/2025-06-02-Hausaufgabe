### Debug 1
liste1 = [4, 5, 6]
liste2 = liste1
liste2.append(7)
print(“Liste1:”, liste1)
print(“Liste2:”, liste2)
## Frage: Warum enthält auch liste1 das Element 7? Wie kann man liste2 unabhängig kopieren?
# Lösung
# liste2 = liste1.copy()

### Debug 2
werte = [2, 4, 6, 8]
ergebnis = [x / 2 for x in werte if x < 5]
print(ergebnis)
## Frage: Welche Werte kommen in die neue Liste? Was bewirkt die Bedingung if x < 5?
# Lösung
# Es kommen nur 2 und 4 in die Liste da die kleiner als 5 sind

### Debug 3
farben = ["rot", "grün", "blau"]
farben_neu = farben
farben = ["gelb", "lila"]
print(farben_neu)
## Frage: Was wird ausgegeben? Warum ist farben_neu hier nicht betroffen?
# Lösung
# arben_neu zeigt weiterhin auf die alte Liste ["rot", "grün", "blau"] da es nur eine Referenz ist

### Debug 4
person = ("Max", 28, "Berlin")
person[2] = "Hamburg"
## Frage: Warum funktioniert das nicht? Was müsste man tun, um einen ähnlichen Effekt zu erzielen?
# Lösung
# Man müsste die Tuple umwandeln in eine Liste und dann die Elemente verändern

### Debug 5
daten = ("Ali", [100, 200])
daten[1][0] = 300
print(daten)
## Frage: Warum ist hier trotz eines Tupels eine Veränderung möglich?
# Lösung
# Listen innerhalb einer Tuple sind veränderbar

### Debug 6
info = {"stadt": "Köln", "einwohner": 1000000}
print(info["fläche"])
## Frage: Warum gibt es hier einen Fehler? Wie kann man den Zugriff sicherer machen?
# Lösung
# Fläche existiert nicht

### Debug 7
def schreibe(text):
    text = text.upper()
    return
nachricht = schreibe("hallo")
print(nachricht)
## Frage: Warum ist die Ausgabe None? Wie müsste die Funktion geändert werden?
# Lösung
# return text.upper()

### Debug 8
def addiere(x, y):
    print(x + y)
summe = addiere(3, 4)
print(summe)
## Frage: Warum kann man mit summe später nicht weiterrechnen?
# Lösung
# return x + y

### Debug 9
x = "global"
def test():
 x = "lokal"
test()
print(x)
## Frage: Warum bleibt x nach dem Funktionsaufruf „global“?
# Lösung
# die Funktion ändert nur die lokale Variable

### Debug 10
def info(name="Gast", stadt):
 print(name, "aus", stadt)
info("Ali", "Berlin")
## Frage: Warum funktioniert diese Definition nicht? Wie muss die Reihenfolge der Parameter angepasst werden?
# Lösung
# Parameter mit default-werten müssen am ende stehen